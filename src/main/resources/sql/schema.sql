-- Oracle SQL Schema for MCP Oracle Agent Testing
-- This script creates tables with enumeration support to test the agent's ability
-- to handle lookup tables and business-friendly translations

-- Drop existing tables if they exist (in reverse order due to foreign keys)
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE order_details CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE orders CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE products CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE customers CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE product_category_enum CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE order_status_enum CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE country_enum CASCADE CONSTRAINTS';
EXCEPTION
   WHEN OTHERS THEN NULL;
END;
/

-- Create enumeration tables

-- Order Status Enumeration
CREATE TABLE order_status_enum (
    status_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    status_code VARCHAR2(20) UNIQUE NOT NULL,
    status_description VARCHAR2(100) NOT NULL,
    status_order NUMBER(2) NOT NULL,  -- For ordering in workflows
    is_active NUMBER(1) DEFAULT 1 CHECK (is_active IN (0, 1)),
    created_date DATE DEFAULT SYSDATE,
    CONSTRAINT uk_order_status_code UNIQUE (status_code)
);

-- Product Category Enumeration
CREATE TABLE product_category_enum (
    category_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    category_code VARCHAR2(20) UNIQUE NOT NULL,
    category_name VARCHAR2(50) NOT NULL,
    category_description VARCHAR2(200),
    parent_category_id NUMBER REFERENCES product_category_enum(category_id),
    is_active NUMBER(1) DEFAULT 1 CHECK (is_active IN (0, 1)),
    created_date DATE DEFAULT SYSDATE
);

-- Country Enumeration
CREATE TABLE country_enum (
    country_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    country_code VARCHAR2(3) UNIQUE NOT NULL,  -- ISO 3166-1 alpha-3
    country_name VARCHAR2(100) NOT NULL,
    region VARCHAR2(50),
    is_active NUMBER(1) DEFAULT 1 CHECK (is_active IN (0, 1)),
    created_date DATE DEFAULT SYSDATE
);

-- Main business tables

-- Customers table
CREATE TABLE customers (
    customer_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    company_name VARCHAR2(100) NOT NULL,
    contact_name VARCHAR2(100),
    contact_title VARCHAR2(50),
    address VARCHAR2(200),
    city VARCHAR2(50),
    postal_code VARCHAR2(20),
    country_id NUMBER NOT NULL REFERENCES country_enum(country_id),
    phone VARCHAR2(30),
    email VARCHAR2(100),
    credit_limit NUMBER(10,2) DEFAULT 10000.00,
    is_active NUMBER(1) DEFAULT 1 CHECK (is_active IN (0, 1)),
    created_date DATE DEFAULT SYSDATE,
    last_modified_date DATE DEFAULT SYSDATE
);

-- Products table
CREATE TABLE products (
    product_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    product_name VARCHAR2(100) NOT NULL,
    product_code VARCHAR2(20) UNIQUE NOT NULL,
    category_id NUMBER NOT NULL REFERENCES product_category_enum(category_id),
    supplier_name VARCHAR2(100),
    unit_price NUMBER(10,2) NOT NULL CHECK (unit_price >= 0),
    units_in_stock NUMBER DEFAULT 0 CHECK (units_in_stock >= 0),
    units_on_order NUMBER DEFAULT 0 CHECK (units_on_order >= 0),
    reorder_level NUMBER DEFAULT 10 CHECK (reorder_level >= 0),
    discontinued NUMBER(1) DEFAULT 0 CHECK (discontinued IN (0, 1)),
    created_date DATE DEFAULT SYSDATE,
    last_modified_date DATE DEFAULT SYSDATE
);

-- Orders table
CREATE TABLE orders (
    order_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_number VARCHAR2(20) UNIQUE NOT NULL,
    customer_id NUMBER NOT NULL REFERENCES customers(customer_id),
    order_date DATE DEFAULT SYSDATE NOT NULL,
    required_date DATE,
    shipped_date DATE,
    status_id NUMBER NOT NULL REFERENCES order_status_enum(status_id),
    shipping_address VARCHAR2(200),
    shipping_city VARCHAR2(50),
    shipping_postal_code VARCHAR2(20),
    shipping_country_id NUMBER REFERENCES country_enum(country_id),
    freight_cost NUMBER(10,2) DEFAULT 0 CHECK (freight_cost >= 0),
    total_amount NUMBER(10,2) DEFAULT 0 CHECK (total_amount >= 0),
    payment_method VARCHAR2(20),
    notes CLOB,
    created_date DATE DEFAULT SYSDATE,
    last_modified_date DATE DEFAULT SYSDATE,
    CONSTRAINT chk_ship_date CHECK (shipped_date IS NULL OR shipped_date >= order_date),
    CONSTRAINT chk_required_date CHECK (required_date IS NULL OR required_date >= order_date)
);

-- Order Details table
CREATE TABLE order_details (
    order_detail_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id NUMBER NOT NULL REFERENCES orders(order_id) ON DELETE CASCADE,
    product_id NUMBER NOT NULL REFERENCES products(product_id),
    quantity NUMBER NOT NULL CHECK (quantity > 0),
    unit_price NUMBER(10,2) NOT NULL CHECK (unit_price >= 0),
    discount NUMBER(3,2) DEFAULT 0 CHECK (discount >= 0 AND discount <= 1),
    line_total NUMBER(10,2) GENERATED ALWAYS AS (quantity * unit_price * (1 - discount)) VIRTUAL,
    created_date DATE DEFAULT SYSDATE,
    CONSTRAINT uk_order_product UNIQUE (order_id, product_id)
);

-- Create indexes for better query performance
CREATE INDEX idx_orders_customer ON orders(customer_id);
CREATE INDEX idx_orders_status ON orders(status_id);
CREATE INDEX idx_orders_date ON orders(order_date);
CREATE INDEX idx_order_details_order ON order_details(order_id);
CREATE INDEX idx_order_details_product ON order_details(product_id);
CREATE INDEX idx_products_category ON products(category_id);
CREATE INDEX idx_customers_country ON customers(country_id);
CREATE INDEX idx_orders_shipping_country ON orders(shipping_country_id);

-- Create views for common queries

-- View for order summary with status names
CREATE OR REPLACE VIEW v_order_summary AS
SELECT 
    o.order_id,
    o.order_number,
    o.order_date,
    c.company_name AS customer_name,
    cn.country_name AS customer_country,
    os.status_code,
    os.status_description AS order_status,
    o.total_amount,
    o.freight_cost,
    (SELECT COUNT(*) FROM order_details od WHERE od.order_id = o.order_id) AS line_items,
    (SELECT SUM(od.quantity) FROM order_details od WHERE od.order_id = o.order_id) AS total_quantity
FROM 
    orders o
    JOIN customers c ON o.customer_id = c.customer_id
    JOIN country_enum cn ON c.country_id = cn.country_id
    JOIN order_status_enum os ON o.status_id = os.status_id;

-- View for product inventory status
CREATE OR REPLACE VIEW v_product_inventory AS
SELECT 
    p.product_id,
    p.product_code,
    p.product_name,
    pc.category_name,
    p.units_in_stock,
    p.units_on_order,
    p.reorder_level,
    CASE 
        WHEN p.units_in_stock <= p.reorder_level THEN 'REORDER'
        WHEN p.units_in_stock <= p.reorder_level * 2 THEN 'LOW'
        ELSE 'OK'
    END AS stock_status,
    p.unit_price,
    p.units_in_stock * p.unit_price AS inventory_value
FROM 
    products p
    JOIN product_category_enum pc ON p.category_id = pc.category_id
WHERE 
    p.discontinued = 0;

-- View for customer order history
CREATE OR REPLACE VIEW v_customer_order_history AS
SELECT 
    c.customer_id,
    c.company_name,
    cn.country_name,
    COUNT(DISTINCT o.order_id) AS total_orders,
    SUM(o.total_amount) AS lifetime_value,
    AVG(o.total_amount) AS avg_order_value,
    MAX(o.order_date) AS last_order_date,
    MIN(o.order_date) AS first_order_date,
    TRUNC(SYSDATE - MAX(o.order_date)) AS days_since_last_order
FROM 
    customers c
    LEFT JOIN orders o ON c.customer_id = o.customer_id
    JOIN country_enum cn ON c.country_id = cn.country_id
GROUP BY 
    c.customer_id, c.company_name, cn.country_name;

-- Create sequences for order numbers
CREATE SEQUENCE order_number_seq START WITH 10000 INCREMENT BY 1;

-- Create trigger to auto-generate order numbers
CREATE OR REPLACE TRIGGER trg_order_number
BEFORE INSERT ON orders
FOR EACH ROW
BEGIN
    IF :NEW.order_number IS NULL THEN
        :NEW.order_number := 'ORD-' || TO_CHAR(SYSDATE, 'YYYY') || '-' || LPAD(order_number_seq.NEXTVAL, 6, '0');
    END IF;
END;
/

-- Create trigger to update last_modified_date
CREATE OR REPLACE TRIGGER trg_customers_update
BEFORE UPDATE ON customers
FOR EACH ROW
BEGIN
    :NEW.last_modified_date := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER trg_products_update
BEFORE UPDATE ON products
FOR EACH ROW
BEGIN
    :NEW.last_modified_date := SYSDATE;
END;
/

CREATE OR REPLACE TRIGGER trg_orders_update
BEFORE UPDATE ON orders
FOR EACH ROW
BEGIN
    :NEW.last_modified_date := SYSDATE;
END;
/

-- Create trigger to update order total when details change
CREATE OR REPLACE TRIGGER trg_update_order_total
AFTER INSERT OR UPDATE OR DELETE ON order_details
FOR EACH ROW
BEGIN
    IF INSERTING OR UPDATING THEN
        UPDATE orders 
        SET total_amount = (
            SELECT SUM(quantity * unit_price * (1 - discount))
            FROM order_details
            WHERE order_id = :NEW.order_id
        )
        WHERE order_id = :NEW.order_id;
    ELSIF DELETING THEN
        UPDATE orders 
        SET total_amount = (
            SELECT NVL(SUM(quantity * unit_price * (1 - discount)), 0)
            FROM order_details
            WHERE order_id = :OLD.order_id
        )
        WHERE order_id = :OLD.order_id;
    END IF;
END;
/

-- Grant necessary permissions (adjust as needed)
-- GRANT SELECT ON v_order_summary TO PUBLIC;
-- GRANT SELECT ON v_product_inventory TO PUBLIC;
-- GRANT SELECT ON v_customer_order_history TO PUBLIC;

COMMIT;
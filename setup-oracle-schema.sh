#!/bin/bash

echo "=== Setting up Oracle Database Schema ==="
echo

# Set password directly
export ORACLE_TESTING_DATABASE_PASSWORD="ARmy0320-- milk"

echo "✓ Using configured Oracle password"
echo

# Use SQL*Plus format for connecting (if available) or use Java with proper statement execution
echo "Executing schema creation..."

# Create a simple Java program to properly execute the SQL
cat > ExecuteOracleSchema.java << 'EOF'
import java.sql.*;
import java.io.*;
import java.nio.file.*;

public class ExecuteOracleSchema {
    public static void main(String[] args) throws Exception {
        // Load Oracle JDBC driver explicitly
        Class.forName("oracle.jdbc.driver.OracleDriver");
        System.out.println("✓ Oracle JDBC driver loaded");
        
        String password = "ARmy0320-- milk";
        String jdbcUrl = "jdbc:oracle:thin:@(description=(retry_count=20)(retry_delay=3)" +
            "(address=(protocol=tcps)(port=1522)(host=adb.us-ashburn-1.oraclecloud.com))" +
            "(connect_data=(service_name=gd77773c35a7f01_zaksedwtest_high.adb.oraclecloud.com))" +
            "(security=(ssl_server_dn_match=yes)))";
        
        System.out.println("Connecting to Oracle database...");
        Connection conn = DriverManager.getConnection(jdbcUrl, "ADMIN", password);
        Statement stmt = conn.createStatement();
        
        System.out.println("Creating tables...\n");
        
        // Drop tables if they exist (ignore errors)
        String[] dropTables = {
            "DROP TABLE order_details CASCADE CONSTRAINTS",
            "DROP TABLE orders CASCADE CONSTRAINTS",
            "DROP TABLE products CASCADE CONSTRAINTS",
            "DROP TABLE customers CASCADE CONSTRAINTS",
            "DROP TABLE product_category_enum CASCADE CONSTRAINTS",
            "DROP TABLE order_status_enum CASCADE CONSTRAINTS",
            "DROP TABLE country_enum CASCADE CONSTRAINTS"
        };
        
        for (String drop : dropTables) {
            try {
                stmt.execute(drop);
                System.out.println("Dropped: " + drop.split(" ")[2]);
            } catch (SQLException e) {
                // Table doesn't exist, that's OK
            }
        }
        
        // Create enumeration tables
        stmt.execute(
            "CREATE TABLE order_status_enum (" +
            "status_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
            "status_code VARCHAR2(20) UNIQUE NOT NULL, " +
            "status_description VARCHAR2(100) NOT NULL, " +
            "status_order NUMBER(2) NOT NULL, " +
            "is_active NUMBER(1) DEFAULT 1 CHECK (is_active IN (0, 1)), " +
            "created_date DATE DEFAULT SYSDATE)"
        );
        System.out.println("✓ Created order_status_enum");
        
        stmt.execute(
            "CREATE TABLE product_category_enum (" +
            "category_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
            "category_code VARCHAR2(20) UNIQUE NOT NULL, " +
            "category_name VARCHAR2(50) NOT NULL, " +
            "category_description VARCHAR2(200), " +
            "parent_category_id NUMBER REFERENCES product_category_enum(category_id), " +
            "is_active NUMBER(1) DEFAULT 1 CHECK (is_active IN (0, 1)), " +
            "created_date DATE DEFAULT SYSDATE)"
        );
        System.out.println("✓ Created product_category_enum");
        
        stmt.execute(
            "CREATE TABLE country_enum (" +
            "country_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
            "country_code VARCHAR2(3) UNIQUE NOT NULL, " +
            "country_name VARCHAR2(100) NOT NULL, " +
            "region VARCHAR2(50), " +
            "is_active NUMBER(1) DEFAULT 1 CHECK (is_active IN (0, 1)), " +
            "created_date DATE DEFAULT SYSDATE)"
        );
        System.out.println("✓ Created country_enum");
        
        // Create main tables
        stmt.execute(
            "CREATE TABLE customers (" +
            "customer_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
            "company_name VARCHAR2(100) NOT NULL, " +
            "contact_name VARCHAR2(100), " +
            "contact_title VARCHAR2(50), " +
            "address VARCHAR2(200), " +
            "city VARCHAR2(50), " +
            "postal_code VARCHAR2(20), " +
            "country_id NUMBER NOT NULL REFERENCES country_enum(country_id), " +
            "phone VARCHAR2(30), " +
            "email VARCHAR2(100), " +
            "credit_limit NUMBER(10,2) DEFAULT 10000.00, " +
            "is_active NUMBER(1) DEFAULT 1 CHECK (is_active IN (0, 1)), " +
            "created_date DATE DEFAULT SYSDATE, " +
            "last_modified_date DATE DEFAULT SYSDATE)"
        );
        System.out.println("✓ Created customers");
        
        stmt.execute(
            "CREATE TABLE products (" +
            "product_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
            "product_name VARCHAR2(100) NOT NULL, " +
            "product_code VARCHAR2(20) UNIQUE NOT NULL, " +
            "category_id NUMBER NOT NULL REFERENCES product_category_enum(category_id), " +
            "supplier_name VARCHAR2(100), " +
            "unit_price NUMBER(10,2) NOT NULL CHECK (unit_price >= 0), " +
            "units_in_stock NUMBER DEFAULT 0 CHECK (units_in_stock >= 0), " +
            "units_on_order NUMBER DEFAULT 0 CHECK (units_on_order >= 0), " +
            "reorder_level NUMBER DEFAULT 10 CHECK (reorder_level >= 0), " +
            "discontinued NUMBER(1) DEFAULT 0 CHECK (discontinued IN (0, 1)), " +
            "created_date DATE DEFAULT SYSDATE, " +
            "last_modified_date DATE DEFAULT SYSDATE)"
        );
        System.out.println("✓ Created products");
        
        stmt.execute(
            "CREATE TABLE orders (" +
            "order_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
            "order_number VARCHAR2(20) UNIQUE NOT NULL, " +
            "customer_id NUMBER NOT NULL REFERENCES customers(customer_id), " +
            "order_date DATE DEFAULT SYSDATE NOT NULL, " +
            "required_date DATE, " +
            "shipped_date DATE, " +
            "status_id NUMBER NOT NULL REFERENCES order_status_enum(status_id), " +
            "shipping_address VARCHAR2(200), " +
            "shipping_city VARCHAR2(50), " +
            "shipping_postal_code VARCHAR2(20), " +
            "shipping_country_id NUMBER REFERENCES country_enum(country_id), " +
            "freight_cost NUMBER(10,2) DEFAULT 0 CHECK (freight_cost >= 0), " +
            "total_amount NUMBER(10,2) DEFAULT 0 CHECK (total_amount >= 0), " +
            "payment_method VARCHAR2(20), " +
            "notes CLOB, " +
            "created_date DATE DEFAULT SYSDATE, " +
            "last_modified_date DATE DEFAULT SYSDATE, " +
            "CONSTRAINT chk_ship_date CHECK (shipped_date IS NULL OR shipped_date >= order_date), " +
            "CONSTRAINT chk_required_date CHECK (required_date IS NULL OR required_date >= order_date))"
        );
        System.out.println("✓ Created orders");
        
        stmt.execute(
            "CREATE TABLE order_details (" +
            "order_detail_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
            "order_id NUMBER NOT NULL REFERENCES orders(order_id) ON DELETE CASCADE, " +
            "product_id NUMBER NOT NULL REFERENCES products(product_id), " +
            "quantity NUMBER NOT NULL CHECK (quantity > 0), " +
            "unit_price NUMBER(10,2) NOT NULL CHECK (unit_price >= 0), " +
            "discount NUMBER(3,2) DEFAULT 0 CHECK (discount >= 0 AND discount <= 1), " +
            "line_total NUMBER(10,2) GENERATED ALWAYS AS (quantity * unit_price * (1 - discount)) VIRTUAL, " +
            "created_date DATE DEFAULT SYSDATE, " +
            "CONSTRAINT uk_order_product UNIQUE (order_id, product_id))"
        );
        System.out.println("✓ Created order_details");
        
        // Create sequence for order numbers
        stmt.execute("CREATE SEQUENCE order_number_seq START WITH 10000 INCREMENT BY 1");
        System.out.println("✓ Created order_number_seq");
        
        // Show table count
        ResultSet rs = stmt.executeQuery(
            "SELECT COUNT(*) FROM user_tables WHERE table_name NOT LIKE 'SYS_%' AND table_name NOT LIKE 'APEX_%'"
        );
        rs.next();
        System.out.println("\n✓ Schema created successfully with " + rs.getInt(1) + " tables");
        
        conn.close();
    }
}
EOF

javac -cp "build/libs/Agents-MCP-Host-1.0.0-fat.jar" ExecuteOracleSchema.java
java -cp ".:build/libs/Agents-MCP-Host-1.0.0-fat.jar" ExecuteOracleSchema

rm ExecuteOracleSchema.java ExecuteOracleSchema.class

echo
echo "✓ Schema setup complete!"